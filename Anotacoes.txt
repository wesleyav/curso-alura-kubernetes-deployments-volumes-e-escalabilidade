# Continuação do curso Kubernetes: Pods, Services e ConfigMaps

Pod
 - Caso falhe, é o fim da vida dele, não retorna
 - Como criar outro para assumir o lugar dele automaticamente?

Replica Set
 - estrutura que pode encapsular um ou mais pods

# Visualizar informações dos serviços
$ kubectl get svc

# Aplicar o arquivo
$ kubectl apply -f .\portal-noticias-replicaset.yaml

# Visualizar informações do pod
$ kubectl get pods

# Exibir o número de replicasets
$ kubectl get replicasets

# Exibir o número de replicasets em tempo real
$ kubectl get replicasets --watch

# Apagar o pod
$ kubectl delete pod portal-noticias-replicaset-p8564

# Com isso vemos que o replicaset cria outro pod automaticamente

#################################################

Deployment
 - camada acima dos replicaset´s
 - quando se define um deployment, define-se automaticamente um replicaset


# Aplicar o arquivo
$ kubectl apply -f .\nginx-deployment.yaml

# Visualizar informações do pod
$ kubectl get pods

# Exibir o número de replicasets
$ kubectl get replicasets

# Exibir o deployment
$ kubectl get deployments

# Exibir o status do controle de fluxo do deployment
# kubectl rollout history deployment nome-do-deployment
$ kubectl rollout history deployment nginx-deployment

# Aplicar o arquivo e altera o histórico do fluxo do deployment (como git)
$ kubectl apply -f .\nginx-deployment.yaml --record

# Visualizar informações do pod
$ kubectl get pods

# Exibir o status do controle de fluxo do deployment
# kubectl rollout history deployment nome-do-deployment
$ kubectl rollout history deployment nginx-deployment

# Definir uma anotação de alteração para exibir no status do controle de fluxo do deployment
# kubectl annotate deployment nome-do-deployment kubernetes.io/change-cause="mensagem de anotação"
$ kubectl annotate deployment nginx-deployment kubernetes.io/change-cause="Definindo a imagem com versão latest"

# Exibir o status do controle de fluxo do deployment
# kubectl rollout history deployment nome-do-deployment
$ kubectl rollout history deployment nginx-deployment

# Visualizar informações do pod
$ kubectl get pods

# Validar o pod
# kubectl describe pod nome-do-pod 
$ kubectl describe pod nginx-deployment-6645687878-ctsbw

# Voltar para a versão de uma alteração específica
# kubectl rollout undo deployment nome-do-deployment --to-revision=2
$ kubectl rollout undo deployment nginx-deployment --to-revision=2

#################################################

# Visualizar informações do pod
$ kubectl get pods

# Deletar o deployment
# kubectl delete deployment nome-do-deployment
$ kubectl delete deployment nginx-deployment

# Deletar o replicaset via arquivo
# kubectl delete -f nome-do-arquivo
$ kubectl delete -f .\portal-noticias-replicaset.yaml

# Aplicar o arquivo
$ kubectl apply -f .\portal-noticias-deployment.yaml

# Visualizar informações do pod
$ kubectl get pods

# Exibir o status do controle de fluxo do deployment
# kubectl rollout history deployment nome-do-deployment
$ kubectl rollout history deployment portal-noticias-deployment

# Definir uma anotação de alteração para exibir no status do controle de fluxo do deployment
# kubectl annotate deployment nome-do-deployment kubernetes.io/change-cause="mensagem de anotação"
$ kubectl annotate deployment portal-noticias-deployment kubernetes.io/change-cause="Criando portal de notícias na versão 1"

# Visualizar informações do pod
$ kubectl get pods

# Apagar o pod
$ kubectl delete pod sistema-noticias

# Aplicar o arquivo
$ kubectl apply -f .\sistema-noticias-deployment.yaml

# Visualizar informações do pod
$ kubectl get pods

# Apagar o pod
$ kubectl delete pod db-noticias

# Aplicar o arquivo
$ kubectl apply -f .\db-noticias-deployment.yaml

# Visualizar informações do pod
$ kubectl get pods

# Definir uma anotação de alteração para exibir no status do controle de fluxo do deployment
# kubectl annotate deployment nome-do-deployment kubernetes.io/change-cause="mensagem de anotação"
$ kubectl annotate deployment sistema-noticias-deployment kubernetes.io/change-cause="Subindo o sistema na versão 1"

# Exibir o status do controle de fluxo do deployment
# kubectl rollout history deployment nome-do-deployment
$ kubectl rollout history deployment sistema-noticias-deployment

# Definir uma anotação de alteração para exibir no status do controle de fluxo do deployment
# kubectl annotate deployment nome-do-deployment kubernetes.io/change-cause="mensagem de anotação"
$ kubectl annotate deployment db-noticias-deployment kubernetes.io/change-cause="Subindo o banco na versão 1"

# Exibir o status do controle de fluxo do deployment
# kubectl rollout history deployment nome-do-deployment
$ kubectl rollout history deployment db-noticias-deployment

# Acessar no navegador
# http://localhost:30001/

# Os dados inseridos sumiram!

#################################################

# Criar arquivo de volume
# Configurar no docker > resources > file sharing e adicionar a pasta para compartilhamento

# Aplicar o arquivo
$ kubectl apply -f .\pod-volume.yaml

# Visualizar informações do pod
$ kubectl get pods

# Verificar se tudo que está dentro do pod e no container está funcionando de forma correta:
# kubectl exec -it nomo-do-pod --container nome-do-container -- bash
$ kubectl exec -it pod-volume --container nginx-container -- bash

$ ls
$ cd volume-dentro-do-container
$ touch arquivo.txt

# Verificar se tudo que está dentro do pod e no container está funcionando de forma correta:
# kubectl exec -it nomo-do-pod --container nome-do-container -- bash
$ kubectl exec -it pod-volume --container jenkins-container -- bash

$ ls
$ cd volume-dentro-do-container
# Será exibido o arquivo.txt criado anteriormente
$ touch outro-arquivo.txt

# No Windows, acesse a pasta C:\primeiro-volume e serão visualizados os serviços criados

# Esse volume está vinculado diretamente ao pod criado, ou seja, se o pod morrer, o volume também morre, porém, os arquivos continuarão existindo na pasta no desktop físico "C:\primeiro-volume"

#################################################

# Visualizar informações do pod
$ kubectl get pods

# Aplicar o arquivo
$ kubectl apply -f .\pv.yaml

# Listar o pv
$ kubectl get pv

# Aplicar o arquivo
$ kubectl apply -f .\pvc.yaml

# Listar o pv
$ kubectl get pvc

# Aplicar o arquivo
$ kubectl apply -f .\pod-pv.yaml

# Visualizar informações do pod
$ kubectl get pods

# Validar o pod
# kubectl describe pod nome-do-pod 
$ kubectl describe pod pod-pv

# Visualizar informações do pod
$ kubectl get pods

# Verificar se tudo que está dentro do pod está funcionando de forma correta:
# kubectl exec -it nomo-do-pod --container nome-do-container -- bash
$ kubectl exec -it pod-volume pod-pv -- bash

$ ls
$ touch arquivo-persistent.txt
$ exit

# Apagar o pod
$ kubectl delete -f pod-pv.yaml

# Visualizar informações do pod
$ kubectl get pods

#################################################

Para saber mais: Mais informações sobre PersistentVolumes

Como dito, existem diversos tipos de plugins de volumes que podem ser utilizados pelos Cloud Providers, cada um com seu respectivo modo de acesso e nomes. Por exemplo, o GCEPersistentDisk que usamos nos vídeos anteriores, permite apenas a criação de um PersistentVolume em modo de ReadWriteOnce ou ReadOnlyMany. Diversas outras informações sobre plugins de volumes e modos de acesso podem ser conferidas nesse link (https://kubernetes.io/docs/concepts/storage/persistent-volumes/) da documentação oficial.

#################################################

# Deletar o replicaset via arquivo
# kubectl delete -f nome-do-arquivo
$ kubectl delete -f .\pv.yaml

# Deletar o replicaset via arquivo
# kubectl delete -f nome-do-arquivo
$ kubectl delete -f .\pvc.yaml

# Deletar o replicaset via arquivo
# kubectl delete -f nome-do-arquivo
$ kubectl delete -f .\pod-pv.yaml

# Aplicar o arquivo
$ kubectl apply -f .\sc.yaml

# Visualizar informações do pod
$ kubectl get sc

# Aplicar o arquivo
$ kubectl apply -f .\pvc-sc.yaml

# Visualizar informações do pod
$ kubectl get pvc-sc

# Aplicar o arquivo
$ kubectl apply -f .\pod-sc.yaml

# Deletar todos os pods
$ kubectl delete pod --all

# Deletar todos os pvc´s
$ kubectl delete pvc --all

# Deletar todos os sc´s
$ kubectl delete sc --all

#################################################

# Aplicar o arquivo
$ kubectl apply -f .\sistema-noticias-statefulset.yaml

# Visualizar informações do pod
$ kubectl get pods

# Visualizar deployments
$ kubectl get deployments

# Deletar o deployment
# kubectl delete deployment nome-do-deployment
$ kubectl delete deployment sistema-noticias-deployment

# Apagar o pod
$ kubectl delete pod sistema-noticias-statefulset-0

#################################################

# Aplicar o arquivo
$ kubectl apply -f .\imagens-pvc.yaml

# Aplicar o arquivo
$ kubectl apply -f .\sessao-pvc.yaml

# Visualizar informações do pod
$ kubectl get pvc

# Visualizar informações do pv
$ kubectl get pv

# Visualizar informações do sc
$ kubectl get sc

# Apagar o pod
$ kubectl delete -f .\sistema-noticias-statefulset.yaml

# Aplicar o arquivo
$ kubectl apply -f .\sistema-noticias-statefulset.yaml

# Acessar no navegador
# http://localhost:30001/

#################################################